{%  for type in types.all where type.name == "SourceryImports_Equatable" %}
{% for variable in type.variables %}
{% if variable|annotated:"testable" %}@testable {% else %}{% endif %}{% if variable|annotated:"preconcurrency" %}@preconcurrency {% else %}{% endif %}import {{ variable.name }}
{% endfor %}

{% endfor %}

// MARK: - Equatable for structs and classes
{% for type in types.all|annotated:"equatable"|!enum|!protocol %}

extension {{ type.name }}: Equatable {
    {{ type.accessLevel }}  static func == (lhs: {{ type.name }}, rhs: {{ type.name }}) -> Bool {
	{% for var in type.variables|!static|!computed %}
		{% if var.actualTypeName.name == "Error" %}
		guard "\(lhs.{{ var.name }})" == "\(rhs.{{ var.name }})" else { return false }
		{% else %}
		guard lhs.{{ var.name }} == rhs.{{ var.name }} else { return false }
		{% endif %}
		{% endfor %}
        return true
    }
}
{% endfor %}

// MARK: - Equatable for enums
{% for type in types.enums|annotated:"equatable" %}

extension {{ type.name }}: Equatable {
    {{ type.accessLevel }} static func == (lhs: {{ type.name }}, rhs: {{ type.name }}) -> Bool {
        switch (lhs,rhs) {
        {% for case in type.cases %}
            {% if case.hasAssociatedValue %}case (.{{ case.name }}({% if case.associatedValues.count == 1 %}let lhs{% else %}{% for associated in case.associatedValues %}let {{ associated.externalName }}1{% if not forloop.last%}, {% endif %}{% endfor %}{% endif %}), .{{ case.name }}({% if case.associatedValues.count == 1 %}let rhs{% else %}{% for associated in case.associatedValues %}let {{ associated.externalName }}2{% if not forloop.last%}, {% endif %}{% endfor %}{% endif %})):{% else %}case (.{{ case.name }}, .{{ case.name }}):{% endif %}
                {% ifnot case.hasAssociatedValue %}return true{% else %}
                {% if case.associatedValues.count == 1 %}
				{% if case.associatedValues.first.actualTypeName.name == "Error" %}
                return "\(lhs)" == "\(rhs)"
				{% else %}
				return lhs == rhs
				{% endif %}
                {% else %}
                {% for associated in case.associatedValues %}
				{% if associated.actualTypeName.name == "Error" %}
				guard "\({{ associated.externalName }}1)" == "\(r{{ associated.externalName }}2)" else { return false }
				{% else %}
				guard {{ associated.externalName }}1 == {{ associated.externalName }}2 else { return false }
				{% endif %}
                {% endfor %}
				return true
                {% endif %}
            {% endif %}
        {% endfor %}
        {% if type.cases.count > 1 %}
			default: return false
		{% endif %}
        }
    }
}
{% endfor %}
