{%  for type in types.all where type.name == "SourceryImports_Lens" %}
{% for variable in type.variables %}
{% if variable|annotated:"testable" %}@testable {% else %}{% endif %}import {{ variable.name }}
{% endfor %}

{% endfor %}

{% for type in types.structs|annotated:"lens" %}

extension {{ type.name }} {
    {{ type.accessLevel }} enum lens {
        {% for var in type.variables|!static|!computed %}

		{% if type.isGeneric %}
		{{ type.accessLevel }} static var {{ var.name }}: Lens<{{ type.name }},{{ var.typeName }}> {
			return Lens<{{ type.name }},{{ var.typeName }}>(
				get: { $0.{{ var.name }} },
				set: { part in
				    { whole in
						{% if var.isMutable %}
						var m = whole
                        m.{{ var.name }} = part
                        return m
					    {% else %}
					    {{ type.name }}(
							{% for var1 in type.variables|!static|!computed %}
						    {{ var1.name }}: {% if var1.name == var.name %}part{% else %}whole.{{ var1.name }}{% endif %}{% if not forloop.last %},{% endif %}{% endfor %})
						{% endif %}
					}
	        })
		}
		{% else %}
        {{ type.accessLevel }} static let {{ var.name }} = Lens<{{ type.name }},{{ var.typeName }}>(
            get: { $0.{{ var.name }} },
			set: { part in
				{ whole in
					{% if var.isMutable %}
					var m = whole
					m.{{ var.name }} = part
					return m
					{% else %}
					{{ type.name }}(
						{% for var1 in type.variables|!static|!computed %}
						{{ var1.name }}: {% if var1.name == var.name %}part{% else %}whole.{{ var1.name }}{% endif %}{% if not forloop.last %},{% endif %}{% endfor %})
					{% endif %}
				}
		})
		{% endif %}
        {% endfor %}
    }
}

{% if type.annotations.lens == "chain" %}
{{ type.accessLevel }} extension Lens where S == T, A == B, B == {{ type.name }} {
	{% for var in type.variables|!static|!computed %}
	var {{ var.name }}: Lens<S,{{ var.typeName }}> {
		return self.then({{ type.name }}.lens.{{ var.name }})
	}

	{% endfor %}
}
{% endif %}
{% endfor %}
